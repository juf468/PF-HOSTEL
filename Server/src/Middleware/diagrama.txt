
Flujo =>

LoginMiddleware => token[deberia decir si admin o no] (que expire a las 6hs)=>(no admin) put/User
                                                                            =>(admin) dashboard/ post,put,option,delete.

admin false => !dashboard
admin true => dashboard.

front => dashboard => crear habitacion => post/host/dashboard/hotel/room
--- hecho---

rutas:

las get:

get alluser => superadmin (*UsersHandler)
get getAllHotelsById => admin y superadmin (Hotelhandler)
get RoomsByHotel => *
-
los post:

post createHotelByUser => admin (DashBoardHandler) *
post createRoom => admin (DashBoardHandler) *
------
los put:

put updateRoom => admin y super (RoomHandler) =>(
    verificacion => const tuhotel = Hotel.findByPk(id: hotelId, userId: userData.id ) => 
    ver si es tu hotel => guarda el hotel, busca en hoteles, donde el id=referencia de hotel, userId: al admin,
    si lo es => update. || error
    dentro de dash
)
 => (
    dentro de RoomHandler => como está. supermid
 )
put UpdateHotelByUser => admin y super (Hotelhandler) => (
    dash => const  = Hote.findByPk(where: { id: id, userId: userData.id})
    hotelhand => como está.
)
put updateAccount => admin(userData) (DashBoardHandler) 
put updateUser => super(req.params) (UsersHandler)

------

los delete:

delete deleteRoom => admin y super (RoomHandler) => (
    dash=>
    Hotel.findOne({ where: { id: room.hotelId, userId: userData.id } })
    if (hotel){
        const newRoomsId = hotel.roomsId.filter((roomId) => roomId !== room.id);

        const poproom = await hotel.update({ roomsId: newRoomsId });
        const destroyroom = await room.destroy();
    }else {
        return res.status(404).send("hotel no encontrado/no es tu hotel")
    }
    )
deleteHotelByUser => admin y super (Hotelhandler) => (
    dash => findByPk(where: { id: id, userId: userData.id})
    privada hotelhand => como está

)
deleteAccount => admin (DashBoardHandler)
deleteUser => super (UsersHandler)

DELETE HOTEL REQ.PARAMS (ID DEL HOTEL) =>
admin cualquiera con el (ID DEL HOTEL) => dashboard(hotelId = userData.id)
findByPk(where: {
    hotelId: hotelId,
    userId: userData.id => si no es tu hotel no se cumple.
}) 

delete hotel del hotelhandler => superadmin => idHotel > destroy() => !(si el hotel es o no tuyo)